const AdminUser = require('../models/AdminUser');

const adminOperations = {
    // Autenticar usu√°rio admin
    async authenticate(username, password) {
        try {
            const admin = await AdminUser.authenticate(username, password);
            return admin;
        } catch (error) {
            console.error('‚ùå Erro na autentica√ß√£o admin:', error);
            throw error;
        }
    },

    // Criar usu√°rio admin padr√£o
    async createDefaultAdmin() {
        try {
            await AdminUser.createDefaultAdmin();
        } catch (error) {
            console.error('‚ùå Erro ao criar admin padr√£o:', error);
            throw error;
        }
    },

    // Buscar usu√°rio admin por ID
    async getAdminById(id) {
        try {
            const admin = await AdminUser.findById(id);
            return admin;
        } catch (error) {
            console.error('‚ùå Erro ao buscar admin por ID:', error);
            throw error;
        }
    },

    // Criar novo usu√°rio admin
    async createAdmin(adminData) {
        try {
            console.log('üÜï Criando novo usu√°rio admin...');
            const admin = new AdminUser(adminData);
            await admin.save();
            console.log(`‚úÖ Usu√°rio admin criado com sucesso: ${admin.username}`);
            return admin;
        } catch (error) {
            console.error('‚ùå Erro ao criar usu√°rio admin:', error);
            throw error;
        }
    },

    // Atualizar usu√°rio admin
    async updateAdmin(id, adminData) {
        try {
            console.log(`üîÑ Atualizando usu√°rio admin ID: ${id}`);
            const admin = await AdminUser.findByIdAndUpdate(
                id,
                adminData,
                { 
                    new: true, 
                    runValidators: true,
                    context: 'query'
                }
            );
            
            if (!admin) {
                throw new Error('Usu√°rio admin n√£o encontrado');
            }
            
            console.log(`‚úÖ Usu√°rio admin atualizado com sucesso: ${admin.username}`);
            return admin;
        } catch (error) {
            console.error('‚ùå Erro ao atualizar usu√°rio admin:', error);
            throw error;
        }
    },

    // Deletar usu√°rio admin
    async deleteAdmin(id) {
        try {
            console.log(`üóëÔ∏è  Deletando usu√°rio admin ID: ${id}`);
            const admin = await AdminUser.findByIdAndDelete(id);
            
            if (!admin) {
                throw new Error('Usu√°rio admin n√£o encontrado');
            }
            
            console.log(`‚úÖ Usu√°rio admin deletado com sucesso: ${admin.username}`);
            return admin;
        } catch (error) {
            console.error('‚ùå Erro ao deletar usu√°rio admin:', error);
            throw error;
        }
    },

    // Listar todos os usu√°rios admin
    async getAllAdmins() {
        try {
            const admins = await AdminUser.find({ is_active: true }).select('-password_hash');
            return admins;
        } catch (error) {
            console.error('‚ùå Erro ao listar usu√°rios admin:', error);
            throw error;
        }
    },

    // Alterar senha do usu√°rio admin
    async changePassword(id, newPassword) {
        try {
            console.log(`üîê Alterando senha do usu√°rio admin ID: ${id}`);
            const admin = await AdminUser.findById(id);
            
            if (!admin) {
                throw new Error('Usu√°rio admin n√£o encontrado');
            }
            
            admin.password_hash = newPassword;
            await admin.save();
            
            console.log(`‚úÖ Senha alterada com sucesso para: ${admin.username}`);
            return admin;
        } catch (error) {
            console.error('‚ùå Erro ao alterar senha:', error);
            throw error;
        }
    }
};

module.exports = adminOperations;
